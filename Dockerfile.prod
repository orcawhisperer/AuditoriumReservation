FROM node:18-alpine AS builder

WORKDIR /app
COPY package*.json ./
RUN npm ci
COPY . .
RUN npm run build

FROM node:18-alpine AS runner
WORKDIR /app

# Copy only production dependencies
COPY package*.json ./
RUN npm ci --only=production

# Copy built app
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/server ./server
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/scripts ./scripts
COPY --from=builder /app/drizzle.config.ts ./drizzle.config.ts
COPY --from=builder /app/tsconfig.json ./tsconfig.json

# Add health check endpoint
RUN echo 'app.get("/health", (_, res) => res.status(200).send("OK"));' >> ./server/routes.ts

# Copy initialization script
COPY --from=builder /app/scripts/init-db.js ./scripts/init-db.js

# Add DB initialization script
RUN echo '#!/bin/sh\necho "Waiting for database to be ready..."\nsleep 5\necho "Initializing database directly..."\nnode scripts/init-db.js || exit 1\necho "Starting application..."\nnode server/index.js' > /app/docker-entrypoint.sh && \
    chmod +x /app/docker-entrypoint.sh

# Create a non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
RUN chown -R nodejs:nodejs /app

USER nodejs
EXPOSE 5000
ENTRYPOINT ["/app/docker-entrypoint.sh"]